;; Standard library for FunC

;; () throw_if(int excno, int cond) impure asm "THROWARGIF";
int throw_if(int excno, int cond) impure asm "THROWARGIF";

;; () throw_unless(int excno, int cond) impure asm "THROWARGIFNOT";
int throw_unless(int excno, int cond) impure asm "THROWARGIFNOT";

;; () throw(int excno) impure asm "THROW";
int throw(int excno) impure asm "THROW";

;; Cell get_data() asm "c4 PUSH";
cell get_data() asm "c4 PUSH";

;; () set_data(cell c) impure asm "c4 POP";
() set_data(cell c) impure asm "c4 POP";

;; () send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";

;; slice begin_parse(cell c) asm "CTOS";

;; builder begin_cell() asm "NEWC";

;; cell end_cell(builder b) asm "ENDC";

;; int slice_empty?(slice s) asm "SEMPTY";

;; int equal_slices(slice a, slice b) asm "SDEQ";

;; int now() asm "NOW";

;; Cell null() asm "PUSHNULL";

;; Builder store operations
;; builder store_uint(builder b, int x, int len) asm(x b len) "STUX";
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX";
;; builder store_slice(builder b, slice s) asm "STSLICER";
;; builder store_ref(builder b, cell c) asm(c b) "STREF";
;; builder store_coins(builder b, int x) asm "STGRAMS";

;; Slice load operations
;; int load_uint(slice s, int len) asm(s len -> 1 0) "LDUX";
;; int load_int(slice s, int len) asm(s len -> 1 0) "LDIX";
;; slice load_bits(slice s, int len) asm(s len -> 1 0) "LDSLICEX";
;; cell load_ref(slice s) asm( -> 1 0) "LDREF";
;; int load_coins(slice s) asm( -> 1 0) "LDGRAMS";

;; Slice preload operations
;; int preload_uint(slice s, int len) asm "PLDUX";

;; Address operations
;; slice load_msg_addr(slice s) asm( -> 1 0) "LDMSGADDR";
;; tuple parse_addr(slice s) asm "PARSEMSGADDR";

;; builder store_msg_addr(builder b, slice s) asm(s b) "STSLICER";

;; Dictionary operations
;; (cell, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";
;; (cell, int) udict_set?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSETGET";
;; (cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";

forall X -> tuple empty_tuple() asm "NIL";
forall X -> (tuple, ()) push_back(tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back(tuple t) asm "UNCONS";
