;; JettonWallet (TEP-74)
;; Simplified implementation for hackathon

#include "imports/stdlib.fc";

;; Storage: balance, owner_address, jetton_master_address
(int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(),      ;; balance
        ds~load_msg_addr(),   ;; owner_address
        ds~load_msg_addr()    ;; jetton_master_address
    );
}

() save_data(int balance, slice owner_address, slice jetton_master_address) impure inline {
    set_data(
        begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
        .end_cell()
    );
}

() send_tokens(slice to_address, int amount, int forward_ton_amount, int forward_payload, slice response_address) impure inline {
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_address)
        .store_coins(forward_ton_amount)
        .store_uint(0, 107)
        .store_uint(0x178d4519, 32)  ;; internal_transfer op
        .store_uint(0, 64)            ;; query_id
        .store_coins(amount)
        .store_slice(response_address)
    .end_cell();
    send_raw_message(msg, 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int balance, slice owner_address, slice jetton_master_address) = load_data();

    ;; Transfer (0xf8a7ea5)
    if (op == 0xf8a7ea5) {
        throw_unless(705, equal_slices(sender_address, owner_address));

        int jetton_amount = in_msg_body~load_coins();
        slice to_owner_address = in_msg_body~load_msg_addr();
        slice response_address = in_msg_body~load_msg_addr();
        int custom_payload = in_msg_body~load_uint(1);
        int forward_ton_amount = in_msg_body~load_coins();

        throw_unless(706, balance >= jetton_amount);

        balance -= jetton_amount;
        save_data(balance, owner_address, jetton_master_address);

        ;; Send to destination wallet
        send_tokens(to_owner_address, jetton_amount, forward_ton_amount, 0, response_address);
        return ();
    }

    ;; Internal Transfer (0x178d4519)
    if (op == 0x178d4519) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        balance += jetton_amount;
        save_data(balance, owner_address, jetton_master_address);
        return ();
    }

    ;; Burn (0x595f07bc)
    if (op == 0x595f07bc) {
        throw_unless(705, equal_slices(sender_address, owner_address));

        int jetton_amount = in_msg_body~load_coins();
        slice response_address = in_msg_body~load_msg_addr();

        throw_unless(706, balance >= jetton_amount);

        balance -= jetton_amount;
        save_data(balance, owner_address, jetton_master_address);

        ;; Notify jetton minter
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(jetton_master_address)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(0x595f07bc, 32)  ;; burn_notification op
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(owner_address)
            .store_slice(response_address)
        .end_cell();
        send_raw_message(msg, 64);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, slice, slice) get_wallet_data() method_id {
    return load_data();
}
