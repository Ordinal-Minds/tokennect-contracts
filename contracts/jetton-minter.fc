;; JettonMinter (TEP-74)
;; Simplified implementation for hackathon

#include "imports/stdlib.fc";

;; Storage: total_supply, admin_address, content, jetton_wallet_code
(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(),      ;; total_supply
        ds~load_msg_addr(),   ;; admin_address (bonding curve)
        ds~load_ref(),        ;; content (metadata)
        ds~load_ref()         ;; jetton_wallet_code
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
    set_data(
        begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
        .end_cell()
    );
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    cell data = begin_cell()
        .store_coins(0)
        .store_slice(owner_address)
        .store_slice(jetton_master_address)
    .end_cell();

    return begin_cell()
        .store_uint(0, 2)
        .store_dict(jetton_wallet_code)
        .store_dict(data)
        .store_uint(0, 1)
    .end_cell();
}

slice calculate_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    cell state_init = calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code);
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(state_init), 256)
    .end_cell().begin_parse();
}

() mint_tokens(slice to_address, int amount, int forward_ton_amount) impure inline {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    slice to_wallet_address = calculate_jetton_wallet_address(to_address, my_address(), jetton_wallet_code);

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(forward_ton_amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code))
        .store_ref(
            begin_cell()
                .store_uint(0x178d4519, 32)  ;; internal_transfer op
                .store_uint(0, 64)            ;; query_id
                .store_coins(amount)
                .store_slice(admin_address)   ;; from_address
            .end_cell()
        )
    .end_cell();
    send_raw_message(msg, 1);

    total_supply += amount;
    save_data(total_supply, admin_address, content, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    ;; Mint (0x15) - only from admin (bonding curve)
    if (op == 0x15) {
        throw_unless(73, equal_slices(sender_address, admin_address));

        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        int forward_ton_amount = in_msg_body~load_coins();

        mint_tokens(to_address, amount, forward_ton_amount);
        return ();
    }

    ;; Burn notification (0x595f07bc)
    if (op == 0x595f07bc) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        slice response_address = in_msg_body~load_msg_addr();

        ;; Verify sender is a valid jetton wallet
        slice expected_wallet = calculate_jetton_wallet_address(from_address, my_address(), jetton_wallet_code);
        throw_unless(74, equal_slices(sender_address, expected_wallet));

        total_supply -= jetton_amount;
        save_data(total_supply, admin_address, content, jetton_wallet_code);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
